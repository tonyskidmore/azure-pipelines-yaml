---

parameters:
  - name: terraformDirectory
    type: string
  - name: terraformVersion
    type: string
  - name: checkout
    type: object
  - name: terraformTfVars
    type: object

steps:

  - task: Cache@2
    displayName: 'Register init cache'
    inputs:
      key: 'terraform | init | "$(Agent.OS)" | "$(Build.BuildNumber)" | "$(Build.SourceVersion)"'
      path: $(System.DefaultWorkingDirectory)

  - ${{ if gt(length(parameters.checkout), 1) }}:
    - ${{ each repo in parameters.checkout }}:
      - checkout: ${{ repo }}
  - ${{ else }}:
    - checkout: self

  - script: |
      env
      ls "$SYSTEM_DEFAULTWORKINGDIRECTORY"
    displayName: Debug
    env:
      ${{ parameters.terraformTfVars}}

  - task: Bash@3
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/pipelines/terraform/scripts/terraform-install.sh'
      arguments: '${{ parameters.terraformVersion }}'
      workingDirectory: '${{ parameters.terraformDirectory }}'
      # failOnStderr: true
      # bashEnvValue: 'tony=good'
    displayName: 'Install Terraform: ${{ parameters.terraformVersion }}'

  - task: Bash@3
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/pipelines/terraform/scripts/azurecli-install.sh'
      # arguments: '${{ parameters.azurecliVersion }}'
      workingDirectory: '${{ parameters.terraformDirectory }}'
    displayName: 'Install azure-cli'

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'demo-vmss' # TODO: make parameter
      scriptType: 'bash'
      scriptPath: '$(System.DefaultWorkingDirectory)/pipelines/terraform/scripts/terraform-init.sh'
      arguments: '${{ parameters.terraformDirectory }}'
      workingDirectory: '${{ parameters.terraformDirectory }}'
      addSpnToEnvironment: true
    displayName: 'Run terraform init'
    env:
      ${{ parameters.terraformTfVars}}
